--
-- Installation procedure
--
--

prompt
prompt I: Start installation
prompt

--
-- Load ORADBA schema variables
@@confdir@/schema-define
--
-- Load package variables
@@confdir@/@PACKAGE_NAME@-define

set echo off
spool @spooldir@/@PACKAGE_NAME@.sql

declare
  cur$action integer := sqlinstaller.ACTION_MODIFY;
  cur$owner  sys.all_users.username%type := '&&ORADBA_SYS_OWNER';
  cur$cfg    sqlinstaller_config_type;
begin
  -- By default all actions are enabled
  cur$cfg := sqlinstaller_config_type( NULL, NULL,
                                       sqlinstaller.action_any, sqlinstaller.enabled );

  dbms_output.put_line( CHR(10) || '-- START ACTION --' );
  dbms_output.put_line( 'set verify off' );
  dbms_output.put_line( '--' );
  dbms_output.put_line( 'define ORA_SCHEMA_OWNER = ' || cur$owner );
  dbms_output.put_line( '-- Set owner schema' );
  dbms_output.put_line( 'alter session set current_schema = ' || cur$owner || ';' );
  dbms_output.put_line( 'prompt' );
  dbms_output.put_line( 'prompt I: Current schema is ' || cur$owner );
  dbms_output.put_line( 'prompt' );

  --
  -- Create sequences
  dbms_output.put_line( 'prompt' );
  dbms_output.put_line( 'prompt I: Creating sequences ...' );
  dbms_output.put_line( 'prompt' );
  cur$cfg.object_name := cur$owner||'.monitoring_config_id';
  cur$cfg.object_type := sqlinstaller.p_sequence;
  sqlinstaller.cfg_set( cur$cfg );
  sqlinstaller.do_sequence( cur$action, cur$owner||'.monitoring_config_id', '@datadir@/sequences/monitoring_config_id' );

  --
  -- Create simple types
  dbms_output.put_line( 'prompt' );
  dbms_output.put_line( 'prompt I: Creating simple types ...' );
  dbms_output.put_line( 'prompt' );
  cur$cfg.object_name := cur$owner||'.monitoring_interval';
  cur$cfg.object_type := sqlinstaller.p_type;
  sqlinstaller.cfg_set( cur$cfg );
  sqlinstaller.do_type( cur$action, cur$owner||'.monitoring_interval', '@datadir@/types/monitoring_interval' );

  --
  -- Create tables and idexes
  dbms_output.put_line( 'prompt' );
  dbms_output.put_line( 'prompt I: Creating tables ...' );
  cur$cfg.object_name := cur$owner||'.monitoring_config';
  cur$cfg.object_type := sqlinstaller.p_table;
  sqlinstaller.cfg_set( cur$cfg );
  sqlinstaller.do_table( cur$action, cur$owner||'.monitoring_config', '@@datadir@/tables/monitoring_config' );

  --
  -- Create types
  dbms_output.put_line( 'prompt' );
  dbms_output.put_line( 'prompt I: Creating types ...' );
  cur$cfg.object_name := cur$owner||'.monitoring_config_type';
  cur$cfg.object_type := sqlinstaller.p_type;
  sqlinstaller.cfg_set( cur$cfg );
  cur$cfg.object_type := sqlinstaller.p_type_body;
  sqlinstaller.cfg_set( cur$cfg );
  sqlinstaller.do_type( cur$action, cur$owner||'.monitoring_config_type', '@@datadir@/types/monitoring_config_type_def' );
  sqlinstaller.do_type_body( cur$action, cur$owner||'.monitoring_config_type', '@@datadir@/types/monitoring_config_type_body' );

  --
  -- Grants
  dbms_output.put_line( 'grant execute on '||cur$owner||'.monitoring_config_type to public;');

  if sqlinstaller.chk_synonym( 'public.monitoring_config_type' ) = false then
    execute immediate
      'create or replace public synonym  monitoring_config_type for '||cur$owner||'.monitoring_config_type';
    dbms_output.put_line( 'I: Public synonym MONITORING_CONFIG_TYPE created' );
  end if;

  dbms_output.put_line( 'alter session set current_schema = &&l_cur_schema;' );

  dbms_output.put_line( CHR(10) || '-- END ACTION --' );
end;
/
spool off

alter session set current_schema = &&l_cur_schema;

-- Execute generated install script
host sed --in-place '1, /^-- START ACTION --/d; /^-- END ACTION --/,$d' @spooldir@/@PACKAGE_NAME@.sql
@@spooldir@/@PACKAGE_NAME@.sql

-- Remove spool file
host rm -f @spooldir@/@PACKAGE_NAME@.sql

prompt
prompt "I: Finish installation"
prompt
